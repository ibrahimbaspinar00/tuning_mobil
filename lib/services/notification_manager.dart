import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../model/notification.dart';
import 'enhanced_notification_service.dart';

/// Bildirim y√∂neticisi - Farklƒ± kategorilerdeki bildirimleri y√∂netir
class NotificationManager {
  static final NotificationManager _instance = NotificationManager._internal();
  factory NotificationManager() => _instance;
  NotificationManager._internal();

  final EnhancedNotificationService _notificationService = EnhancedNotificationService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  /// Bildirim y√∂neticisini ba≈ülat
  Future<void> initialize() async {
    await _notificationService.initialize();
  }

  // ==================== KAMPANYA VE ƒ∞NDƒ∞Rƒ∞M Bƒ∞LDƒ∞Rƒ∞MLERƒ∞ ====================

  /// Kampanya bildirimi g√∂nder
  Future<void> sendCampaignNotification({
    required String title,
    required String description,
    required double discountPercentage,
    String? productId,
    String? categoryId,
    DateTime? validUntil,
    String? imageUrl,
    List<String>? targetUserIds,
  }) async {
    await _notificationService.sendCampaignNotification(
      title: title,
      description: description,
      discountPercentage: discountPercentage,
      productId: productId,
      categoryId: categoryId,
      validUntil: validUntil,
      imageUrl: imageUrl,
    );

    // Kampanya verilerini Firestore'a kaydet
    await _saveCampaignData({
      'title': title,
      'description': description,
      'discount_percentage': discountPercentage,
      'product_id': productId,
      'category_id': categoryId,
      'valid_until': validUntil,
      'image_url': imageUrl,
      'target_user_ids': targetUserIds,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  /// Flash sale bildirimi g√∂nder
  Future<void> sendFlashSaleNotification({
    required String productName,
    required double originalPrice,
    required double salePrice,
    required int timeLeftMinutes,
    String? productId,
  }) async {
    await _notificationService.sendFlashSaleNotification(
      productName: productName,
      originalPrice: originalPrice,
      salePrice: salePrice,
      timeLeftMinutes: timeLeftMinutes,
    );

    // Flash sale verilerini kaydet
    await _saveFlashSaleData({
      'product_name': productName,
      'product_id': productId,
      'original_price': originalPrice,
      'sale_price': salePrice,
      'time_left_minutes': timeLeftMinutes,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  /// Yeni √ºr√ºn bildirimi g√∂nder
  Future<void> sendNewProductNotification({
    required String productName,
    required String category,
    String? imageUrl,
    String? productId,
  }) async {
    await _notificationService.sendNewProductNotification(
      productName: productName,
      category: category,
      imageUrl: imageUrl,
    );

    // Yeni √ºr√ºn verilerini kaydet
    await _saveNewProductData({
      'product_name': productName,
      'product_id': productId,
      'category': category,
      'image_url': imageUrl,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  /// Stok uyarƒ± bildirimi g√∂nder
  Future<void> sendStockAlertNotification({
    required String productName,
    required int remainingStock,
    String? productId,
  }) async {
    final title = '‚ö†Ô∏è Stok Uyarƒ±sƒ±!';
    final body = '$productName √ºr√ºn√ºnden sadece $remainingStock adet kaldƒ±! Hemen sipari≈ü verin.';
    
    await _notificationService.sendNotification(
      title: title,
      body: body,
      type: 'promotion',
      channelId: 'promotion_notifications',
      data: {
        'action': 'view_product',
        'product_name': productName,
        'product_id': productId,
        'remaining_stock': remainingStock,
      },
    );
  }

  // ==================== Sƒ∞PARƒ∞≈û Bƒ∞LDƒ∞Rƒ∞MLERƒ∞ ====================

  /// Sipari≈ü onay bildirimi g√∂nder
  Future<void> sendOrderConfirmationNotification({
    required String orderId,
    required double totalAmount,
    required int itemCount,
    required String estimatedDelivery,
    required String userId,
  }) async {
    await _notificationService.sendOrderConfirmationNotification(
      orderId: orderId,
      totalAmount: totalAmount,
      itemCount: itemCount,
      estimatedDelivery: estimatedDelivery,
    );

    // Sipari≈ü onay verilerini kaydet
    await _saveOrderConfirmationData({
      'order_id': orderId,
      'user_id': userId,
      'total_amount': totalAmount,
      'item_count': itemCount,
      'estimated_delivery': estimatedDelivery,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  /// Sipari≈ü hazƒ±rlƒ±k bildirimi g√∂nder
  Future<void> sendOrderPreparationNotification({
    required String orderId,
    required String status,
    required String userId,
  }) async {
    await _notificationService.sendOrderPreparationNotification(
      orderId: orderId,
      status: status,
    );

    // Sipari≈ü hazƒ±rlƒ±k verilerini kaydet
    await _saveOrderPreparationData({
      'order_id': orderId,
      'user_id': userId,
      'status': status,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  /// Sipari≈ü iptal bildirimi g√∂nder
  Future<void> sendOrderCancellationNotification({
    required String orderId,
    required String reason,
    required String userId,
  }) async {
    final title = '‚ùå Sipari≈üiniz ƒ∞ptal Edildi';
    final body = 'Sipari≈ü #$orderId iptal edildi. Sebep: $reason';
    
    await _notificationService.sendNotification(
      title: title,
      body: body,
      type: 'order',
      channelId: 'order_notifications',
      userId: userId,
      data: {
        'action': 'view_order',
        'order_id': orderId,
        'reason': reason,
      },
    );
  }

  // ==================== KARGO Bƒ∞LDƒ∞Rƒ∞MLERƒ∞ ====================

  /// Kargo g√∂nderim bildirimi g√∂nder
  Future<void> sendShippingNotification({
    required String orderId,
    required String trackingNumber,
    required String courierCompany,
    required String userId,
  }) async {
    await _notificationService.sendShippingNotification(
      orderId: orderId,
      trackingNumber: trackingNumber,
      courierCompany: courierCompany,
    );

    // Kargo g√∂nderim verilerini kaydet
    await _saveShippingData({
      'order_id': orderId,
      'user_id': userId,
      'tracking_number': trackingNumber,
      'courier_company': courierCompany,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  /// Teslimat bildirimi g√∂nder
  Future<void> sendDeliveryNotification({
    required String orderId,
    required String deliveryDate,
    required String userId,
  }) async {
    await _notificationService.sendDeliveryNotification(
      orderId: orderId,
      deliveryDate: deliveryDate,
    );

    // Teslimat verilerini kaydet
    await _saveDeliveryData({
      'order_id': orderId,
      'user_id': userId,
      'delivery_date': deliveryDate,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  /// Kargo durumu g√ºncelleme bildirimi g√∂nder
  Future<void> sendShippingStatusUpdateNotification({
    required String orderId,
    required String status,
    required String location,
    required String userId,
  }) async {
    final title = 'üì¶ Kargo Durumu G√ºncellendi';
    final body = 'Sipari≈ü #$orderId: $status - $location';
    
    await _notificationService.sendNotification(
      title: title,
      body: body,
      type: 'shipping',
      channelId: 'shipping_notifications',
      userId: userId,
      data: {
        'action': 'track_shipment',
        'order_id': orderId,
        'status': status,
        'location': location,
      },
    );
  }

  // ==================== √ñDEME Bƒ∞LDƒ∞Rƒ∞MLERƒ∞ ====================

  /// √ñdeme onay bildirimi g√∂nder
  Future<void> sendPaymentConfirmationNotification({
    required String orderId,
    required double amount,
    required String paymentMethod,
    required String userId,
  }) async {
    await _notificationService.sendPaymentConfirmationNotification(
      orderId: orderId,
      amount: amount,
      paymentMethod: paymentMethod,
    );

    // √ñdeme onay verilerini kaydet
    await _savePaymentConfirmationData({
      'order_id': orderId,
      'user_id': userId,
      'amount': amount,
      'payment_method': paymentMethod,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  /// ƒ∞ade bildirimi g√∂nder
  Future<void> sendRefundNotification({
    required String orderId,
    required double refundAmount,
    required String reason,
    required String userId,
  }) async {
    await _notificationService.sendRefundNotification(
      orderId: orderId,
      refundAmount: refundAmount,
      reason: reason,
    );

    // ƒ∞ade verilerini kaydet
    await _saveRefundData({
      'order_id': orderId,
      'user_id': userId,
      'refund_amount': refundAmount,
      'reason': reason,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  // ==================== Sƒ∞STEM Bƒ∞LDƒ∞Rƒ∞MLERƒ∞ ====================

  /// Sistem bakƒ±m bildirimi g√∂nder
  Future<void> sendMaintenanceNotification({
    required String title,
    required String description,
    required DateTime maintenanceStart,
    required DateTime maintenanceEnd,
  }) async {
    final body = 'Sistem bakƒ±mƒ±: $maintenanceStart - $maintenanceEnd. $description';
    
    await _notificationService.sendNotification(
      title: title,
      body: body,
      type: 'system',
      channelId: 'system_notifications',
      data: {
        'action': 'view_maintenance',
        'maintenance_start': maintenanceStart.toIso8601String(),
        'maintenance_end': maintenanceEnd.toIso8601String(),
      },
    );
  }

  /// Uygulama g√ºncelleme bildirimi g√∂nder
  Future<void> sendAppUpdateNotification({
    required String version,
    required String description,
    required String downloadUrl,
  }) async {
    final title = 'üîÑ Uygulama G√ºncellendi!';
    final body = 'Yeni s√ºr√ºm v$version kullanƒ±ma hazƒ±r! $description';
    
    await _notificationService.sendNotification(
      title: title,
      body: body,
      type: 'system',
      channelId: 'system_notifications',
      data: {
        'action': 'download_update',
        'version': version,
        'download_url': downloadUrl,
      },
    );
  }

  // ==================== VERƒ∞ KAYDETME METODLARI ====================

  Future<void> _saveCampaignData(Map<String, dynamic> data) async {
    try {
      await _firestore.collection('campaigns').add(data);
    } catch (e) {
      print('‚ùå Kampanya verisi kaydedilemedi: $e');
    }
  }

  Future<void> _saveFlashSaleData(Map<String, dynamic> data) async {
    try {
      await _firestore.collection('flash_sales').add(data);
    } catch (e) {
      print('‚ùå Flash sale verisi kaydedilemedi: $e');
    }
  }

  Future<void> _saveNewProductData(Map<String, dynamic> data) async {
    try {
      await _firestore.collection('new_products').add(data);
    } catch (e) {
      print('‚ùå Yeni √ºr√ºn verisi kaydedilemedi: $e');
    }
  }

  Future<void> _saveOrderConfirmationData(Map<String, dynamic> data) async {
    try {
      await _firestore.collection('order_confirmations').add(data);
    } catch (e) {
      print('‚ùå Sipari≈ü onay verisi kaydedilemedi: $e');
    }
  }

  Future<void> _saveOrderPreparationData(Map<String, dynamic> data) async {
    try {
      await _firestore.collection('order_preparations').add(data);
    } catch (e) {
      print('‚ùå Sipari≈ü hazƒ±rlƒ±k verisi kaydedilemedi: $e');
    }
  }

  Future<void> _saveShippingData(Map<String, dynamic> data) async {
    try {
      await _firestore.collection('shipping_updates').add(data);
    } catch (e) {
      print('‚ùå Kargo verisi kaydedilemedi: $e');
    }
  }

  Future<void> _saveDeliveryData(Map<String, dynamic> data) async {
    try {
      await _firestore.collection('delivery_updates').add(data);
    } catch (e) {
      print('‚ùå Teslimat verisi kaydedilemedi: $e');
    }
  }

  Future<void> _savePaymentConfirmationData(Map<String, dynamic> data) async {
    try {
      await _firestore.collection('payment_confirmations').add(data);
    } catch (e) {
      print('‚ùå √ñdeme onay verisi kaydedilemedi: $e');
    }
  }

  Future<void> _saveRefundData(Map<String, dynamic> data) async {
    try {
      await _firestore.collection('refunds').add(data);
    } catch (e) {
      print('‚ùå ƒ∞ade verisi kaydedilemedi: $e');
    }
  }

  // ==================== Bƒ∞LDƒ∞Rƒ∞M Y√ñNETƒ∞Mƒ∞ ====================

  /// Kullanƒ±cƒ±nƒ±n bildirimlerini getir
  Stream<List<AppNotification>> getUserNotifications() {
    return _notificationService.getUserNotifications();
  }

  /// Bildirimi okundu olarak i≈üaretle
  Future<void> markAsRead(String notificationId) async {
    await _notificationService.markAsRead(notificationId);
  }

  /// T√ºm bildirimleri okundu olarak i≈üaretle
  Future<void> markAllAsRead() async {
    await _notificationService.markAllAsRead();
  }

  /// Bildirim ayarlarƒ±nƒ± getir
  Future<Map<String, bool>> getNotificationSettings() async {
    final user = _auth.currentUser;
    if (user == null) return {};

    try {
      final doc = await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('settings')
          .doc('notifications')
          .get();

      if (doc.exists) {
        return Map<String, bool>.from(doc.data() ?? {});
      }
    } catch (e) {
      print('‚ùå Bildirim ayarlarƒ± alƒ±namadƒ±: $e');
    }

    // Varsayƒ±lan ayarlar
    return {
      'promotions': true,
      'orders': true,
      'shipping': true,
      'payments': true,
      'system': true,
    };
  }

  /// Bildirim ayarlarƒ±nƒ± g√ºncelle
  Future<void> updateNotificationSettings(Map<String, bool> settings) async {
    final user = _auth.currentUser;
    if (user == null) return;

    try {
      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('settings')
          .doc('notifications')
          .set(settings);
    } catch (e) {
      print('‚ùå Bildirim ayarlarƒ± g√ºncellenemedi: $e');
    }
  }
}
